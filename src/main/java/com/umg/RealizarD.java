/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.umg;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.swing.JOptionPane;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
/**
 *
 * @author MAR ACEITUNO
 */
public class RealizarD extends javax.swing.JFrame {

    /**
     * Creates new form RealizarD
     */
    public RealizarD() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        NodeCuentaField = new javax.swing.JTextField();
        NombreField = new javax.swing.JTextField();
        MontoDepositarField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("REALIZAR DEPOSITO"));

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setText("REGRESAR ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("REALIZAR DEPOSITO");

        jLabel2.setText("NO. DE CUENTA");
        jLabel3.setText("MONTO A DEPOSITAR");

        jLabel4.setText("NOMBRE");

        jButton2.setBackground(new java.awt.Color(204, 204, 204));
        jButton2.setText("ACEPTAR");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(329, 329, 329)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(MontoDepositarField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NodeCuentaField, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NombreField, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(106, 106, 106))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NodeCuentaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(NombreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(116, 116, 116)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MontoDepositarField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 196, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(127, 127, 127))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositToAccount(evt);
            }
            }
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      Panel_control  pc = new Panel_control();
          this.setVisible(false);
          pc.setVisible(true);
          
          String NodeCuenta = NodeCuentaField.getText();
          String Nombre = NombreField.getText();
          String MontoDepositar = MontoDepositarField.getText();
    }//GEN-LAST:event_jButton1ActionPerformed


    private void DepositToAccount(ActionEvent event){
        String NodeCuenta = NodeCuentaField.getText();
        String Nombre = NombreField.getText();
        String MontoDepositar = MontoDepositarField.getText();
        System.out.println(NodeCuenta);
        System.out.println(Nombre);
        System.out.println(MontoDepositar);

        // metodo provisional para insertar en el archivo
        try {
            Workbook workbook;
            File file = new File("DatosCuentas.xlsx");
            if (file.exists() && file.length() > 0) {
                workbook = new XSSFWorkbook(new FileInputStream(file));
            } else {
                workbook = new XSSFWorkbook();
            }
            Sheet sheet = workbook.getSheet("Datos de cuentas");
            // Por cada fila, se obtiene la cuarta columna(indice 3), correspondiente al ID de la cuenta
            sheet.forEach((row) -> {
                Cell currentCell = row.getCell(3);
                CellType cellType = currentCell.getCellType();
                double NoCuenta = 0;
                // el switch ayuda a manejar errores por la primera fila de encabezados
                switch (cellType) {
                    case CellType.STRING -> {
                        try {
                            NoCuenta = Double.valueOf(currentCell.getStringCellValue());
                            System.out.println("Se encontraron los numeros de cuenta(string): " + currentCell.getStringCellValue());
                            if(Double.valueOf(NodeCuenta) == NoCuenta){
                                System.out.println("Se encontro coincidencia con una cuenta");
                                System.out.println("Indice de fila");
                                System.out.println(currentCell.getRowIndex());
                                Cell currentCellBalance = sheet.getRow(currentCell.getRowIndex()).getCell(2);
                                System.out.println(currentCellBalance.getAddress().formatAsString());
                                System.out.println(currentCellBalance.getStringCellValue());
                                double newBalance = Double.valueOf(currentCellBalance.getStringCellValue()) + Double.valueOf(MontoDepositar);
                                currentCellBalance.setAsActiveCell();
                                currentCellBalance.setBlank();
                                currentCellBalance.setCellValue(newBalance);
                                System.out.println("Cuenta actualizada");
                                System.out.println(currentCellBalance.getNumericCellValue());
                                FileOutputStream fileOut = new FileOutputStream("DatosCuentas.xlsx");
                                workbook.write(fileOut);
                                workbook.close();
                                JOptionPane.showMessageDialog(null, "Archivo Excel creado exitosamente.");
                            }
                        } catch (Exception e) {
                            System.out.println("Continuando se encontro una fila que no puede ser convertida a numero");
                            System.out.println(e.getMessage());
                        }
                    }
                    case CellType.NUMERIC -> {
                        try {
                            NoCuenta = Double.valueOf(currentCell.getStringCellValue());
                            System.out.println("Se encontraron los numeros de cuenta(string): " + currentCell.getStringCellValue());
                            if(Double.valueOf(NodeCuenta) == NoCuenta){
                                System.out.println("Se encontro coincidencia con una cuenta");
                                System.out.println("Indice de fila");
                                System.out.println(currentCell.getRowIndex());
                                Cell currentCellBalance = sheet.getRow(currentCell.getRowIndex()).getCell(2);
                                System.out.println(currentCellBalance.getAddress().formatAsString());
                                System.out.println(currentCellBalance.getStringCellValue());
                                double newBalance = Double.valueOf(currentCellBalance.getStringCellValue()) + Double.valueOf(MontoDepositar);
                                currentCellBalance.setAsActiveCell();
                                currentCellBalance.setBlank();
                                currentCellBalance.setCellValue(newBalance);
                                System.out.println("Cuenta actualizada");
                                System.out.println(currentCellBalance.getNumericCellValue());
                                FileOutputStream fileOut = new FileOutputStream("DatosCuentas.xlsx");
                                workbook.write(fileOut);
                                workbook.close();
                                JOptionPane.showMessageDialog(null, "Archivo Excel creado exitosamente.");
                            }
                        } catch (Exception e) {
                            System.out.println("Continuando se encontro una fila que no puede ser convertida a numero");
                            System.out.println(e.getMessage());
                        }
                    }
                    default -> throw new NumberFormatException();
                }
               
            }
            );
        } catch (Exception e) {
            System.out.println("Error en la creacion o lectura del archivo:");
            System.out.println(e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RealizarD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RealizarD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RealizarD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RealizarD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RealizarD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField MontoDepositarField;
    private javax.swing.JTextField NodeCuentaField;
    private javax.swing.JTextField NombreField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
